17 Sep

Next time, work on the timeline configuration at the bottom and moving the lines freely vertically (but not horizontally)



17 Oct

I figured out why the nodes weren't changing size - resizing only works on certain shapes!



18 Oct

timeline bar has been configured end to end, now figure out a way to limit zooming out: https://stackoverflow.com/questions/49299774/how-to-limit-zooming-of-a-vis-js-network
Also figure out a way to change node size with zoom (instance.on("zoom"))



30 Oct

Configured the timeline - style the bar and tooltip for the year a little more next time



4 Dec

Configured the start and end dates for the timeline diagram  - next time, work on configuring the timeline with it as well



5 Dec

Configured timeline bar year - next time, work on auto adjusting the specificity of the displayed date on timeline to year -> month -> day -> hour -> minute -> second depending on how close the start date and end date are



9 Dec

Created a utils function for minimal time unit



11 Dec

auto configured the timeline bar unit, but resolve the problem of the diagram not adjusting upon first load



21 Dec

things to do now:
1. Maybe move on to discussion view? Spent long enough on this one (will do this to complete the full cycle on the timeline part)
2. Or move on to the location view (use HERE api)
3. Should I be able to configure timeline bar by myself as a user? Or should it only depend on the timeline events I currently have? -> it is the latter right now - maybe change that?

Relationship between connections and discussions:

Simplest - Allow user to set some sort of filter in the beginning (e.g. most popular, most controversial, biased towards a certain side, only my opinions, etc), then configure the connections accordingly

Maybe I can involve ML later in the project, but for now let's try that

So the first thing to do:

1. Change API so that the abstract request takes in a filter argument, which controls whether a connection is returned or not based on the discussions

2. Add those filters to the frontend

Things to do at one point:

1. Change API so that the abstract request takes in multiple abstract IDs and return all of the abstracts in an array

2. Responsive design (use bootstrap)

3. prop drilling (use redux)

4. Refactor new node objects

5. Fix types from any to the designated interfaces

6. Change login to google form



22 Dec

Finished refactoring node and edge objects from TimelineDiagram.tsx to another file (Utils)

Moving on to the discussions part by tackling the API - try returning all abstracts with just 1 request

problem: Should I not formulate anything before taking a look at the discussions? That would mean the filters are always there whether through user control or by default



23 Dec

Answer: Looking up all discussions for every node and connection is extremely inefficient. Then how should I tackle this? -> In the backend, make fields in timeline event, CE or LS that correspond to different filters (e.g. most popular: true means that this node/edge does get returned in the response when the filter is for "most popular"). Then, update these fields every time a discussion gets updated

Problem: Should I do number 1 from above as well? YES do it with the above point!



25 Dec

Need to rethink the above point - filters really need more detail than what I can possibly write down - for example, a user should be able to filter for "most popular" amongst opinions with more upvotes than downvotes. Or most viewed among opinions with 4+ rating. But then if I were to do that, wouldn't that take too long to configure? -> so just try it out! Limit this discussion check to nodes (whether this node should be in this timeline object), CE (if it exists) and LS (if it exists) and not the timeline connections between nodes. Then, every time the timeline connections are returned, check the opinions in the "existence" discussion on each of them before returning timeline objects. Then, return timelines for all abstracts (not just 1).



3 Jan

Are opinions all yes or no? Or should there be different degrees or extents to it?
TE: yes or no
LS: yes or no
CE: yes or no
I'll try yes or no to everything and see where it goes
related_name is a way for the other model to access the model in use - change it following the example in line 70 for discussion

different filters: all True, all False, most popular, average above certain rating, most upvoted, etc



7 Jan

Created the filter part on the api url



11 Jan

Plan from this point on: Create the filter popup on the frontend side - a range bar for the upvotes and a few buttons for the other options



16 Jan

Things to do list progress in the order they should be done:

1. Incorporate filters [Done]

2. Refactor new node and edge objects [Done]

3. Fix types from any to the designated interfaces [Ongoing]

4. prop drilling (use redux)

5. Responsive design (use bootstrap)

6. Create the filter form on the frontend

7. Change API so that the abstract request takes in multiple abstract IDs and return all of the abstracts in an array, then refactor the timelineevent grabbing code to reflect this

18 Jan

Fixing types - got rid of the "shared" field of Entry model and created different types on the types.tsx page - now apply them throughout the code



28 Jan

checked that types are all ok now

1. Incorporate filters [Done]

2. Refactor new node and edge objects [Done]

3. Fix types from any to the designated interfaces [Done]

4. prop drilling (use redux) [Maybe - not needed as mostly 1 layer of prop drilling]

5. Responsive design (use bootstrap) [Ongoing]

6. Create the filter form on the frontend



31 Jan

Decided will just do Bootstrap instead of react-bootstrap

Created the layout diagrams for lg, md and sm



3 Feb

Make sure to use react-bootstrap grid (https://react-bootstrap.github.io/layout/grid/)

And refactor navigation to be outside of the routes components (inside App.tsx)



12 Feb

Note: don't use margin with react-bootstrap because it's so prone to error - use padding instead




23 Feb

1. Incorporate filters [Done]

2. Refactor new node and edge objects [Done]

3. Fix types from any to the designated interfaces [Done]

4. prop drilling (use redux) [Maybe - not needed as mostly 1 layer of prop drilling]

5. Responsive design (use bootstrap) [Done]

6. Create the filter form on the frontend [Ongoing]

TimelineView Component has been changed to grid, the rest are just single columns and stuff so ok to use flex instead of bootstrap grid. Now start working on the filter form

As for filter, I now have All True, All False, More Opinions (which side has more opinion count), Most Upvoted ( follow the stance of the most upvoted opinion). I'll also add the following: Most Quoted (opinion that's selected the most for other users' diagrams). But all these options are for nodes and connections that the user hasn't selected themselves. For the ones that they have selected (or even better, created an opinion themselves), that selection should take priority.

So, End To End flow for the filter feature:

User gets an empty canvas -> Adds an abstract -> System checks if default filter has been set (need to implement this for the user profile) -> if yes, use it -> if not, system prompts the user to select filter for the current diagram -> Once the user selects it, the system saves it for that diagram (not the default filter for the user) -> the diagram is then displayed with the selected filter -> From there, the user can click on the node or the connection to exclude them from the diagram (wait, but what about the nodes and connections that you can't see?) -> So for the other case - namely enabling the ones the user can't see - create a modal or dropdown that would essentially run a search for all nodes and connections. The user can filter in that search for abstract, time period (e.g. 1350 - 1373), keywords, etc -> if they find something that they've looking for, they click on it and the system would prompt the user to select an opinion to go along with (because that obviously wouldn't exist in the filter the user has set for this diagram) (make visual cue for specifically selected nodes and connections like this on the diagram) -> but if they don't find anything, the system will suggest that they add it in

Also, create a separate filter form that allows the user to change the filter for that diagram as well, which is different from the prompts I've described in the previous paragraph that allows them to interact with adding/removing nodes and connections



24 Feb

Below md for responsive design is messed up, and the canvas height adjustment's a little weird - but let's keep going with the filter for now, can come back to this later

Start working on the filter - Basically follow the end to end flow above: Add default filter for the user profile, which is set to null in the beginning. Also, add user diagrams to user profile (one-to-many).

Then, implement the system prompt that asks the user if default filter should be used or if they would like to set a separate filter

Once done with the filters, eventually start working on customising the timeline visuals (because this application is essentially a history visualisation website)



28 Feb

What does it mean to have diagram added to user profile? What does the diagram object consist of in the database? -> abstracts, filter and special selections

For different diagrams, have tabs at the top of the diagram that work similar to Chrome tabs (multiple grey tabs with '+' sign at the end to add more tabs)



15 Mar

Which is the better practice?
1. Have diagram information such as abstracts, filter and specified nodes, grab from backend, then configure the diagram on the frontend side
2. Have the diagram configured on the backend (every node and connection), and frontend only grabs it and styles it

Obviously [2] is better, but it's harder! -> wait, is it a better practice? It may shorten the load time a little bit, but each timeline event and connection will be saved multiple times - the actual save AND every diagram it's a part of.

Do [1] for now

Also, make sure to add the connections in the diagram too, not just nodes

Instead of checking all specified opinions upon configuring each node or connection (n x m), use a pointer system (n + m, so effectively n)

Ok, no - let's go back to the basics. How do I ensure that the user can freely change the filter for the current diagram but still mark some opinions (for nodes and connections) as specified?

Case 1: When filter is set for the diagram by the user, make a put request to the backend to alter the filter field of the said diagram. Then, it should return the updated diagram object (or, preferably the difference between the older version and the newer version) as the response. Then, the frontend reconfigures the diagram based on that.

Case 2: When filter is set for the diagram by the user, make a put request to the backend to alter the filter field of the said diagram. Not only should it update the filter, but it should trigger the renewal of nodes and connections on the diagram stored in backend. Then, the nodes and connections should be sent to frontend as the response of that put request so that the frontend can update.

It makes more sense for the backend to just hold the essential information about the diagram, and for the frontend to figure out actual nodes and edges based on those. However, we also don't want to completely reconfigure the entire diagram every time the user makes a change on the frontend either. So to compromise...

Solution: Backend holds the basic information about the diagram (basically like right now). Upon intial rendering of the diagram, the frontend makes a get call for the diagram, configures all the nodes and edges based on the information, and stores that complete diagram into a state and displays it (first time call). Then, when a change is made (filter is changed, a timeline event or a connection is "specified" with an opinion, etc), we make a put request to update that on the backend. Then, that change updates the complete diagram on the frontend side (not entirely reconfiguring it, but only updating that particular change in that state)



19 Mar 2023

First step: Change the layout - if I'm doing diagrams, having abstract search and active abstracts outside of the diagram doesn't make that much sense logically. Make it look more like a diagram tool.

Diagram tool ideas:
https://assets.justinmind.com/wp-content/uploads/2018/07/flow-diagrams-diagramming-ui-kit-justinmind.png
https://repository-images.githubusercontent.com/548833078/6a80698c-bdc5-47b9-b07c-fb17a4d11ecd
